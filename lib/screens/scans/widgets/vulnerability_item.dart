// lib/screens/scans/widgets/vulnerability_item.dart
import 'package:flutter/material.dart';
import '../../../models/vulnerability_model.dart';
import '../../../theme/app_theme.dart';

class VulnerabilityItem extends StatefulWidget {
  final Vulnerability vulnerability;
  final bool expanded;
  final Function(bool)? onExpansionChanged;

  const VulnerabilityItem({
    Key? key,
    required this.vulnerability,
    this.expanded = false,
    this.onExpansionChanged,
  }) : super(key: key);

  @override
  State<VulnerabilityItem> createState() => _VulnerabilityItemState();
}

class _VulnerabilityItemState extends State<VulnerabilityItem> with SingleTickerProviderStateMixin {
  late bool _expanded;
  late AnimationController _animationController;
  late Animation<double> _expandAnimation;

  @override
  void initState() {
    super.initState();
    _expanded = widget.expanded;

    _animationController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 300),
    );

    _expandAnimation = CurvedAnimation(
      parent: _animationController,
      curve: Curves.easeInOut,
    );

    if (_expanded) {
      _animationController.value = 1.0;
    }
  }

  @override
  void didUpdateWidget(VulnerabilityItem oldWidget) {
    super.didUpdateWidget(oldWidget);
    if (widget.expanded != oldWidget.expanded) {
      _setExpanded(widget.expanded);
    }
  }

  @override
  void dispose() {
    _animationController.dispose();
    super.dispose();
  }

  void _toggleExpanded() {
    final newExpanded = !_expanded;
    _setExpanded(newExpanded);
    if (widget.onExpansionChanged != null) {
      widget.onExpansionChanged!(newExpanded);
    }
  }

  void _setExpanded(bool expanded) {
    setState(() {
      _expanded = expanded;
    });

    if (_expanded) {
      _animationController.forward();
    } else {
      _animationController.reverse();
    }
  }

  @override
  Widget build(BuildContext context) {
    return AppCard(
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // Header - always visible
          InkWell(
            onTap: _toggleExpanded,
            borderRadius: BorderRadius.circular(AppRadius.medium),
            child: Padding(
              padding: const EdgeInsets.all(AppSpacing.small),
              child: Row(
                children: [
                  Container(
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: _getSeverityColor(widget.vulnerability.severity).withOpacity(0.1),
                      borderRadius: BorderRadius.circular(AppRadius.small),
                    ),
                    child: Icon(
                      _getVulnerabilityIcon(widget.vulnerability.type),
                      color: _getSeverityColor(widget.vulnerability.severity),
                    ),
                  ),
                  const SizedBox(width: AppSpacing.small),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          widget.vulnerability.type.replaceAll('_', ' ').toUpperCase(),
                          style: AppTextStyles.subtitle,
                        ),
                        Text(
                          widget.vulnerability.affectedComponent,
                          style: AppTextStyles.caption,
                        ),
                      ],
                    ),
                  ),
                  Container(
                    padding: const EdgeInsets.symmetric(
                      horizontal: AppSpacing.small,
                      vertical: 4,
                    ),
                    decoration: BoxDecoration(
                      color: _getSeverityColor(widget.vulnerability.severity).withOpacity(0.1),
                      borderRadius: BorderRadius.circular(AppRadius.medium),
                    ),
                    child: Text(
                      widget.vulnerability.severity.toUpperCase(),
                      style: TextStyle(
                        fontSize: 12,
                        fontWeight: FontWeight.bold,
                        color: _getSeverityColor(widget.vulnerability.severity),
                      ),
                    ),
                  ),
                  const SizedBox(width: AppSpacing.small),
                  RotationTransition(
                    turns: Tween(begin: 0.0, end: 0.5).animate(_expandAnimation),
                    child: Icon(
                      Icons.keyboard_arrow_down,
                      color: AppColors.textSecondary,
                    ),
                  ),
                ],
              ),
            ),
          ),

          // Expandable details
          SizeTransition(
            sizeFactor: _expandAnimation,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const Divider(),
                Padding(
                  padding: const EdgeInsets.all(AppSpacing.medium),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'Description',
                        style: AppTextStyles.subtitle,
                      ),
                      const SizedBox(height: 4),
                      Text(
                        widget.vulnerability.description,
                        style: AppTextStyles.body,
                      ),
                      const SizedBox(height: AppSpacing.medium),

                      Text(
                        'Recommendation',
                        style: AppTextStyles.subtitle,
                      ),
                      const SizedBox(height: 4),
                      Container(
                        padding: const EdgeInsets.all(AppSpacing.small),
                        decoration: BoxDecoration(
                          color: AppColors.secondary.withOpacity(0.1),
                          borderRadius: BorderRadius.circular(AppRadius.small),
                          border: Border.all(
                            color: AppColors.secondary.withOpacity(0.3),
                          ),
                        ),
                        child: Row(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Icon(
                              Icons.healing,
                              color: AppColors.secondary,
                              size: 16,
                            ),
                            const SizedBox(width: 8),
                            Expanded(
                              child: Text(
                                widget.vulnerability.recommendation,
                                style: TextStyle(color: AppColors.secondary),
                              ),
                            ),
                          ],
                        ),
                      ),

                      // CVE IDs
                      if (widget.vulnerability.cveIds.isNotEmpty) ...[
                        const SizedBox(height: AppSpacing.medium),
                        Text(
                          'Related CVEs',
                          style: AppTextStyles.subtitle,
                        ),
                        const SizedBox(height: 8),
                        Wrap(
                          spacing: 8,
                          runSpacing: 8,
                          children: widget.vulnerability.cveIds.map((cve) {
                            return Container(
                              padding: const EdgeInsets.symmetric(
                                horizontal: 8,
                                vertical: 4,
                              ),
                              decoration: BoxDecoration(
                                color: Colors.grey[200],
                                borderRadius: BorderRadius.circular(4),
                              ),
                              child: Text(
                                cve,
                                style: const TextStyle(
                                  fontSize: 12,
                                  fontFamily: 'monospace',
                                ),
                              ),
                            );
                          }).toList(),
                        ),
                      ],

                      // CVSS Score
                      if (widget.vulnerability.cvssScore != null) ...[
                        const SizedBox(height: AppSpacing.medium),
                        Row(
                          children: [
                            Text(
                              'CVSS Score:',
                              style: AppTextStyles.subtitle,
                            ),
                            const SizedBox(width: 8),
                            Container(
                              padding: const EdgeInsets.symmetric(
                                horizontal: 8,
                                vertical: 4,
                              ),
                              decoration: BoxDecoration(
                                color: _getCvssScoreColor(widget.vulnerability.cvssScore!).withOpacity(0.1),
                                borderRadius: BorderRadius.circular(8),
                              ),
                              child: Text(
                                widget.vulnerability.cvssScore!.toString(),
                                style: TextStyle(
                                  fontWeight: FontWeight.bold,
                                  color: _getCvssScoreColor(widget.vulnerability.cvssScore!),
                                ),
                              ),
                            ),
                          ],
                        ),
                      ],

                      // Technical details
                      if (widget.vulnerability.technicalDetails.isNotEmpty) ...[
                        const SizedBox(height: AppSpacing.medium),
                        Text(
                          'Technical Details',
                          style: AppTextStyles.subtitle,
                        ),
                        const SizedBox(height: 8),
                        Container(
                          padding: const EdgeInsets.all(AppSpacing.small),
                          decoration: BoxDecoration(
                            color: Colors.grey[100],
                            borderRadius: BorderRadius.circular(AppRadius.small),
                            border: Border.all(color: Colors.grey[300]!),
                          ),
                          child: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: widget.vulnerability.technicalDetails.entries.map((entry) {
                              return Padding(
                                padding: const EdgeInsets.only(bottom: 8),
                                child: Row(
                                  crossAxisAlignment: CrossAxisAlignment.start,
                                  children: [
                                    SizedBox(
                                      width: 120,
                                      child: Text(
                                        _formatKey(entry.key),
                                        style: const TextStyle(
                                          fontWeight: FontWeight.w500,
                                          color: Colors.grey,
                                        ),
                                      ),
                                    ),
                                    Expanded(
                                      child: Text(
                                        entry.value.toString(),
                                        style: const TextStyle(
                                          fontFamily: 'monospace',
                                          fontSize: 13,
                                        ),
                                      ),
                                    ),
                                  ],
                                ),
                              );
                            }).toList(),
                          ),
                        ),
                      ],
                    ],
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Color _getSeverityColor(String severity) {
    switch (severity.toLowerCase()) {
      case 'critical':
        return AppColors.riskCritical;
      case 'high':
        return AppColors.riskHigh;
      case 'medium':
        return AppColors.riskMedium;
      case 'low':
      default:
        return AppColors.riskLow;
    }
  }

  IconData _getVulnerabilityIcon(String type) {
    switch (type.toUpperCase()) {
      case 'WEAK_CREDENTIALS':
        return Icons.password;
      case 'INSECURE_PROTOCOLS':
        return Icons.security;
      case 'AUTH_BYPASS':
        return Icons.no_encryption;
      case 'FIRMWARE_ISSUES':
        return Icons.system_update;
      case 'ENCRYPTION_ISSUES':
        return Icons.lock_open;
      case 'DEFAULT_CREDENTIALS':
        return Icons.key_off;
      case 'OPEN_PORTS':
        return Icons.router;
      case 'KNOWN_CVE':
        return Icons.bug_report;
      default:
        return Icons.help_outline;
    }
  }

  Color _getCvssScoreColor(double score) {
    if (score >= 9.0) return Colors.purple[700]!;
    if (score >= 7.0) return Colors.red;
    if (score >= 4.0) return Colors.orange;
    return Colors.yellow[700]!;
  }

  String _formatKey(String key) {
    return key
        .replaceAll('_', ' ')
        .split(' ')
        .map((word) => word.isNotEmpty ? '${word[0].toUpperCase()}${word.substring(1)}' : '')
        .join(' ');
  }
}