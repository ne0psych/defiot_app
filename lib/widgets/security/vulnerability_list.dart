// lib/widgets/security/vulnerability_list.dart
import 'package:flutter/material.dart';
import '../../theme/app_theme.dart';
import '../../models/vulnerability_model.dart';
import '../common/app_card.dart';

class VulnerabilityList extends StatelessWidget {
  final List<Vulnerability> vulnerabilities;
  final VoidCallback? onViewAll;
  final bool showViewAll;
  final bool compact;
  final Function(Vulnerability)? onVulnerabilityTap;

  const VulnerabilityList({
    Key? key,
    required this.vulnerabilities,
    this.onViewAll,
    this.showViewAll = true,
    this.compact = false,
    this.onVulnerabilityTap,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    if (vulnerabilities.isEmpty) {
      return Center(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: Text(
            'No vulnerabilities found',
            style: TextStyle(
              color: Colors.grey[600],
              fontSize: 16,
            ),
          ),
        ),
      );
    }

    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        if (showViewAll && vulnerabilities.length > 3) ...[
          Padding(
            padding: const EdgeInsets.only(bottom: 8),
            child: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  'Vulnerabilities (${vulnerabilities.length})',
                  style: AppTextStyles.subtitle,
                ),
                TextButton(
                  onPressed: onViewAll,
                  child: const Text('View All'),
                ),
              ],
            ),
          ),
        ],
        ListView.builder(
          shrinkWrap: true,
          physics: const NeverScrollableScrollPhysics(),
          itemCount: compact && vulnerabilities.length > 3 && showViewAll
              ? 3
              : vulnerabilities.length,
          itemBuilder: (context, index) {
            final vulnerability = vulnerabilities[index];
            return VulnerabilityItem(
              vulnerability: vulnerability,
              compact: compact,
              onTap: onVulnerabilityTap != null
                  ? () => onVulnerabilityTap!(vulnerability)
                  : null,
            );
          },
        ),
      ],
    );
  }
}

class VulnerabilityItem extends StatelessWidget {
  final Vulnerability vulnerability;
  final bool compact;
  final VoidCallback? onTap;

  const VulnerabilityItem({
    Key? key,
    required this.vulnerability,
    this.compact = false,
    this.onTap,
  }) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final color = _getSeverityColor(vulnerability.severity);
    final icon = _getVulnerabilityIcon(vulnerability.type);

    return AppCard(
      padding: const EdgeInsets.all(12),
      onTap: onTap,
      elevation: 1,
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Container(
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: color.withOpacity(0.1),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Icon(icon, color: color, size: 24),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Expanded(
                      child: Text(
                        _formatVulnerabilityType(vulnerability.type),
                        style: const TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 16,
                        ),
                      ),
                    ),
                    Container(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 8,
                        vertical: 4,
                      ),
                      decoration: BoxDecoration(
                        color: color.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(12),
                      ),
                      child: Text(
                        vulnerability.severity.toUpperCase(),
                        style: TextStyle(
                          color: color,
                          fontSize: 12,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 4),
                Text(
                  vulnerability.description,
                  style: TextStyle(
                    color: Colors.grey[700],
                    fontSize: 14,
                  ),
                ),
                if (!compact) ...[
                  const SizedBox(height: 8),
                  Text(
                    'Affected: ${vulnerability.affectedComponent}',
                    style: TextStyle(
                      color: Colors.grey[600],
                      fontSize: 13,
                    ),
                  ),
                  const SizedBox(height: 8),
                  Text(
                    'Recommendation',
                    style: const TextStyle(
                      fontWeight: FontWeight.w600,
                      fontSize: 14,
                    ),
                  ),
                  const SizedBox(height: 2),
                  Text(
                    vulnerability.recommendation,
                    style: TextStyle(
                      color: Colors.grey[700],
                      fontSize: 13,
                    ),
                  ),
                  if (vulnerability.cvssScore != null) ...[
                    const SizedBox(height: 8),
                    Row(
                      children: [
                        Text(
                          'CVSS Score: ',
                          style: const TextStyle(
                            fontWeight: FontWeight.w600,
                            fontSize: 14,
                          ),
                        ),
                        Text(
                          vulnerability.cvssScore!.toString(),
                          style: TextStyle(
                            color: _getCvssScoreColor(vulnerability.cvssScore!),
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ],
                    ),
                  ],
                ],
              ],
            ),
          ),
        ],
      ),
    );
  }

  Color _getSeverityColor(String severity) {
    switch (severity.toLowerCase()) {
      case 'critical':
        return AppColors.riskCritical;
      case 'high':
        return AppColors.riskHigh;
      case 'medium':
        return AppColors.riskMedium;
      case 'low':
        return AppColors.riskLow;
      default:
        return Colors.grey;
    }
  }

  IconData _getVulnerabilityIcon(String type) {
    switch (type.toUpperCase()) {
      case 'WEAK_CREDENTIALS':
        return Icons.password;
      case 'INSECURE_PROTOCOLS':
        return Icons.security;
      case 'AUTH_BYPASS':
        return Icons.no_encryption;
      case 'FIRMWARE_ISSUES':
        return Icons.system_update;
      case 'ENCRYPTION_ISSUES':
        return Icons.lock_open;
      case 'DEFAULT_CREDENTIALS':
        return Icons.key_off;
      case 'OPEN_PORTS':
        return Icons.router;
      default:
        return Icons.help_outline;
    }
  }

  String _formatVulnerabilityType(String type) {
    return type
        .split('_')
        .map((word) => '${word[0].toUpperCase()}${word.substring(1).toLowerCase()}')
        .join(' ');
  }

  Color _getCvssScoreColor(double score) {
    if (score >= 9.0) return AppColors.riskCritical;
    if (score >= 7.0) return AppColors.riskHigh;
    if (score >= 4.0) return AppColors.riskMedium;
    return AppColors.riskLow;
  }
}